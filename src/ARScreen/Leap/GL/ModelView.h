#pragma once

#include "Leap/GL/Internal/EigenTypes.h"

namespace Leap {
namespace GL {

/// @brief Replacement for the old-style OpenGL model-view matrix stack.
class ModelView {
public:
  /// @brief Constructs a matrix stack whose single element is the identity matrix.
  ModelView();
  /// @brief Returns a const reference to the top of the matrix stack.
  const EigenTypes::Matrix4x4& Matrix() const;
  /// @brief Returns a non-const reference to the top of the matrix stack.
  EigenTypes::Matrix4x4& Matrix();
  /// @brief Replaces the top of the stack with the identity matrix.
  void LoadIdentity();
  /// @brief For setting the `view` part of the model-view matrix.
  void LookAt(const EigenTypes::Vector3& eye, const EigenTypes::Vector3& center, const EigenTypes::Vector3& up);
  /// @brief Right-applies a translation to the top of the stack.
  void Translate(const EigenTypes::Vector3& translation);
  /// @brief Right-applies a rotation to the top of the stack.
  void Rotate(const EigenTypes::Vector3& axis, double angleRadians);
  /// @brief Right-applies a non-uniform scaling to the top of the stack.
  void Scale(const EigenTypes::Vector3& scale);
  /// @brief Right-applies a generic transformation to the top of the stack.
  void Multiply(const EigenTypes::Matrix4x4& transform);
  /// @brief Right-applies a linear transformation to the top of the stack.
  /// @details The linear transformation is generated by extending the 3x3 matrix M
  /// to be a 4x4 matrix having the following layout.  Here, M signifies the argument
  /// `linear`.
  /// @verbatim
  /// [ M 0 ]
  /// [ 0 1 ]
  /// @endverbatim
  void Multiply(const EigenTypes::Matrix3x3& linear);
  /// @brief Pushes a copy of the top of the stack onto the stack.
  void Push();
  /// @brief Pops the stack.
  void Pop();
  /// @brief Deletes the whole stack, and then pushes the identity matrix.
  void Clear();
private:

  // Compute the transformation taking points in world coordinates to points in view coordinates,
  // where the positive x axis goes rightward in the view, the positive y axis goes upward in the
  // view, and the positive z axis goes toward the viewer (away from focus_position).  The
  // transformation is defined by an eye position (position of the viewer), a focus position (a
  // point that the viewer is looking at), and an "up" direction (the viewer's notion of "up").
  // This transformation is inverse to the one computed by LookAt_Inverse.
  // Equivalent to the deprecated function gluLookAt.
  static void LookAt (
    EigenTypes::Matrix4x4 &model_view_matrix,  // Out-variable for the transformation.
    const EigenTypes::Vector3 &eye_position,   // In-variable for the location of the eye.
    const EigenTypes::Vector3 &focus_position, // In-variable for the point the eye is looking at.
    const EigenTypes::Vector3 &up_direction);  // In-variable for the "up" direction for the view.

  // Compute the transformation taking points in view coordinates to points in world coordinates.
  // This transformation is inverse to the one computed by LookAt.
  // This transformation is what you would use as the local AffineTransformation property in order
  // to place a physical viewer as a SceneGraphNode in a scene graph.  The out-variable is not
  // called `model_view_matrix` because the value computed here would not be used in a model_view
  // matrix for viewing purposes -- it is for physical placement of the viewer in the world, rather
  // than placement of the world about the viewer.
  static void LookAt_Inverse (
    EigenTypes::Matrix4x4 &matrix,             // Out-variable for the transformation.
    const EigenTypes::Vector3 &eye_position,   // In-variable for the location of the eye.
    const EigenTypes::Vector3 &focus_position, // In-variable for the point the eye is looking at.
    const EigenTypes::Vector3 &up_direction);  // In-variable for the "up" direction for the view.

  std::vector<EigenTypes::Matrix4x4, ::Eigen::aligned_allocator<EigenTypes::Matrix4x4> > m_stack;
};

} // end of namespace GL
} // end of namespace Leap
